# 项目管理 Agent MVP 开发规则

## 项目概述
这是一个基于OpenWebUI + PostgreSQL + 飞书机器人的科研项目管理智能应用，实现任务管理、进度跟踪、到期提醒等核心功能。

## 技术栈
- **后端**: OpenWebUI + Python + FastAPI
- **数据库**: PostgreSQL (支持pgvector扩展)
- **前端**: React/Vue.js + Ant Design/Element UI
- **集成**: 飞书机器人 + APScheduler定时任务
- **部署**: Docker + Docker Compose

## 项目结构
```
pm_agent/
├── docs/                    # 项目文档
├── backend/                 # 后端代码
│   ├── plugins/            # OpenWebUI插件
│   ├── core/               # 核心业务逻辑
│   ├── database/           # 数据库相关
│   ├── services/           # 业务服务
│   └── utils/              # 工具函数
├── frontend/               # 前端代码
├── knowledge/              # 知识库文件
├── scripts/                # 部署脚本
├── docker/                 # Docker配置
└── tests/                  # 测试代码
```

## 开发规范

### Python代码规范
- 使用Python 3.9+
- 遵循PEP 8规范
- 使用类型注解
- 函数和类必须有文档字符串
- 使用snake_case命名
- 类名使用PascalCase
- 常量使用UPPER_CASE

### 数据库规范
- 使用PostgreSQL
- 表名和字段名使用snake_case
- 包含大写字母的字段名必须用双引号包围
- 所有函数命名添加user_前缀
- 函数返回值和声明中的类型要一致
- 使用pgvector扩展支持向量搜索

### 插件开发规范
- 基于OpenWebUI原生插件系统
- 使用@function装饰器定义工具函数
- 使用@webhook装饰器处理飞书消息
- 插件必须包含plugin.yaml配置文件
- 支持热加载和动态更新

### 前端开发规范
- 使用TypeScript
- 组件使用PascalCase命名
- 文件使用kebab-case命名
- 使用函数式组件和Hooks
- 遵循ESLint和Prettier规范

### 文档规范
- 所有文档使用Markdown格式
- 代码注释使用中文
- API文档使用OpenAPI规范
- 不添加创建日期或修改日期

## 功能模块

### 核心功能
1. **任务管理**: 创建、查询、更新、删除任务
2. **进度跟踪**: 状态更新、进度监控
3. **到期提醒**: 自动提醒即将到期和延期任务
4. **飞书集成**: 自然语言交互、消息推送
5. **数据导出**: Excel/PDF格式报告生成

### 扩展功能
1. **知识库**: PMBOK/PRINCE2方法论支持
2. **可视化**: 甘特图、燃尽图、看板
3. **多Agent**: 需求Agent、风险Agent协作
4. **移动端**: 响应式设计、飞书App集成

## 开发流程

### 分支管理
- main: 主分支，生产环境
- develop: 开发分支
- feature/*: 功能分支
- hotfix/*: 热修复分支

### 提交规范
- feat: 新功能
- fix: 修复bug
- docs: 文档更新
- style: 代码格式调整
- refactor: 代码重构
- test: 测试相关
- chore: 构建过程或辅助工具的变动

### 测试要求
- 单元测试覆盖率 > 80%
- 集成测试覆盖核心功能
- 性能测试验证非功能需求
- 所有API必须有测试用例

## 部署规范

### 环境配置
- 开发环境: localhost:8100
- 测试环境: test.pm-agent.com
- 生产环境: prod.pm-agent.com

### Docker规范
- 使用多阶段构建
- 镜像大小优化
- 健康检查配置
- 环境变量管理

### 监控告警
- 服务健康检查
- 数据库连接监控
- 飞书API调用监控
- 错误日志收集

## 安全规范

### 数据安全
- 数据库连接加密
- 敏感信息加密存储
- SQL注入防护
- 输入参数验证

### 接口安全
- JWT Token认证
- API限流
- 请求参数验证
- 错误信息脱敏

### 权限管理
- 用户角色权限控制
- 操作日志记录
- 数据访问控制
- 跨团队数据隔离

## 性能要求

### 响应时间
- Web前端响应时间 ≤ 2秒
- 飞书消息发送延迟 ≤ 30秒
- 数据库查询响应时间 ≤ 500ms

### 并发支持
- 支持500+任务管理
- 支持50+用户并发
- 支持100+飞书消息/分钟

### 资源使用
- 内存使用 < 2GB
- CPU使用率 < 70%
- 磁盘空间 < 10GB

## 代码审查

### 审查要点
- 代码逻辑正确性
- 性能优化
- 安全漏洞
- 代码规范遵循
- 测试覆盖率

### 审查流程
1. 功能开发完成
2. 自测通过
3. 提交Pull Request
4. 代码审查
5. 合并到主分支

## 故障处理

### 常见问题
- 数据库连接失败
- 飞书API调用异常
- 定时任务执行失败
- 内存泄漏问题

### 处理流程
1. 问题识别和分类
2. 影响范围评估
3. 临时解决方案
4. 根本原因分析
5. 永久修复方案

## 版本管理

### 版本号规范
- 主版本号: 重大功能更新
- 次版本号: 新功能添加
- 修订号: Bug修复

### 发布流程
1. 功能开发完成
2. 测试验证通过
3. 文档更新完成
4. 版本号更新
5. 生产环境部署

## 注意事项

1. **不要随意删改已有功能**，除非明确要求
2. **每次修改前不清楚的地方及时提问**
3. **不要修改其他未提及的功能**
4. **所有操作使用中文回应**
5. **Windows系统注意使用正确的文件操作命令**
6. **使用mamba代替conda进行包管理**
7. **禁止在base环境下安装业务包**
